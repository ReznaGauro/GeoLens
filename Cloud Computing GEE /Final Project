//////////////////////////// Cloud Computing - Final Project \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

///////////////////////// Surface Urban Heat Island intensity (S-UHI) \\\\\\\\\\\\\\\\\\\\\\
////////////////////// from satellite measurements of thermal radiation \\\\\\\\\\\\\\\\\\\\\

//****************************************************************************************//
/*

This script is specifically developed to analyze the Urban Heat Island (UHI) effects 
in New York City, and to compute them using satellite-derived thermal radiation data 
from the Earth's surface. The script allows users to procure LST data through two 
methods:

- Obtaining LST from derived products such as MODIS Terra and Aqua satellite datasets 
  (Wan 2006).
  
- Direct estimation of LST from satellite measurements in the thermal band.

Both methods are demonstrated using New York City as the area of interest.


# Author: Rejina Gauro (reznagauro09@gmail.com)

//******************************************************************************************/


// Part 1: Deriving Land Surface Temperature \\
// 1.1. From MODIS: 

// Load Feature Collection of New York City.
var AOI = ee.FeatureCollection ('projects/ee-rezna/assets/NewYork');

// Get dissolved feature collection using an error margin of 50 meters.
var AOI = AOI.union(50);

// Set map center and zoom level (Zoom level varies from 1 to 20). 
Map.setCenter ( -74.0060, 40.7128, 11);

// Add layer to map. 
Map.addLayer(AOI, {}, 'New York City'); 

// Load MODIS image collection from the Earth Engine data catalog. 
var ModisLST = ee.ImageCollection("MODIS/061/MOD11A2"); 
print ('MODIS LST', ModisLST);

// Select the band of interest (in this case: Daytime LST).
var landSurfTemperature = ModisLST.select ('LST_Day_1km');

// Create a summer filter.
var sumFilter = ee.Filter.dayOfYear(152, 243);

// Filter the date range of interest using a date filter. 
var lstDateInt = landSurfTemperature
    .filterDate ( '2014-01-01', '2019-01-01') 
    .filter (sumFilter);

// Take pixel-wise mean of all the images in the collection.
var lstMean = lstDateInt.mean ();


/**************************************************************************************
The image is converted to land surface temperature (LST) in degrees Celsius, with water
pixels excluded to focus on land areas. The Global Surface Water dataset (Pekel et al., 
2016) is used to mask out water pixels. After the pixel values are obtained, the scaling 
factor provided by the data source is applied, and then 273.15 is subtracted to convert 
from Kelvin to degrees Celsius.
**************************************************************************************/


// Multiply each pixel by scaling factor to get the LST values.
var lstFinal = lstMean.multiply (0.02);

// Generate a water mask.
var water = ee.Image("JRC/GSW1_4/GlobalSurfaceWater")
            .select('occurrence');

var notWater = water.mask().not();

// Clip data to region of interest, convert to degree Celsius, and mask water pixels. 
var lstKtmValley = lstFinal.clip(AOI)
                   .subtract(273.15) 
                   .updateMask(notWater); 
// Add layer to map. 
Map.addLayer(lstKtmValley, { 
             palette: ['blue', 'white', 'red'], 
             min: 20, 
             max: 32 
            }, 
            'LST_MODIS');


/************************************************************************************** 
This script generates a layer with Five-year summer composite of daytime MODIS Aqua LST 
over New York City.Red pixels show higher LST values and blue pixels have lower values.

**************************************************************************************/

// 1.2. From LANDSAT:

// Function to filter out cloudy pixels.
function cloudMask(cloudyScene) {
    // Add a cloud score band to the image.
    var scored = ee.Algorithms.Landsat.simpleCloudScore(cloudyScene);
    
    // Create an image mask from the cloud score band and specify threshold.
    var mask = scored.select(['cloud']).lte(10);

    // Apply the mask to the original image and return the masked image.
    return cloudyScene.updateMask(mask);
}  

// Load the collection, apply coud mask, and filter to date and region of interest.
var col = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA')
            .filterBounds(AOI)
            .filterDate('2014-01-01', '2019-01-01')
            .filter(sumFilter)
            .map(cloudMask);

print('Landsat collection', col);

// Generate median composite.
var image = col.median();

// Select thermal band 10 (with brightness temperature).
var thermal = image.select('B10')
                   .clip(AOI)
                   .updateMask(notWater);
                   
Map.addLayer(thermal, {
        min: 295,
        max: 310,
        palette: ['blue', 'white', 'red']
    },
      'Landsat_BT');
      
// Calculate Normalized Difference Vegetation Index (NDVI) 
// from Landsat surface reflectance.
var ndvi = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
             .filterBounds(AOI)
             .filterDate('2014-01-01', '2019-01-01')
             .filter(sumFilter)
             .median()
             .normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI')
             .clip(AOI)
             .updateMask(notWater);

Map.addLayer(ndvi, {
        min: 0,
        max: 1,
        palette: ['blue', 'white', 'green']
    },
      'ndvi');  

// Find the minimum and maximum of NDVI.  Combine the reducers
// for efficiency (single pass over the data).
var minMax = ndvi.reduceRegion({
    reducer: ee.Reducer.min().combine({
        reducer2: ee.Reducer.max(),
        sharedInputs: true
    }),
       geometry: AOI,
       scale: 30,
       maxPixels: 1e9
});
print('minMax', minMax);

var min = ee.Number(minMax.get('NDVI_min'));
var max = ee.Number(minMax.get('NDVI_max'));

// Calculate fractional vegetation.
var fv = ndvi.subtract(min).divide(max.subtract(min)).rename('FV');
Map.addLayer(fv, {
    min: 0,
    max: 1,
    palette: ['blue', 'white', 'green']
}, 'fv');

// Emissivity calculations.
var a = ee.Number(0.004);
var b = ee.Number(0.986);
var em = fv.multiply(a).add(b).rename('EMM').updateMask(notWater);

Map.addLayer(em, {
        min: 0.98,
        max: 0.99,
        palette: ['blue', 'white', 'green']
    },
      'EMM');
      
// Calculate LST from emissivity and brightness temperature.
var lstLandsat = thermal.expression(
    '(Tb/(1 + (0.001145* (Tb / 1.438))*log(Ep)))-273.15', {
        'Tb': thermal.select('B10'),
        'Ep': em.select('EMM')
    }).updateMask(notWater);

print ('LST Landsat', lstLandsat);

Map.addLayer(lstLandsat, {
        min: 25,
        max: 35,
        palette: ['blue', 'white', 'red'],
    },
      'LST_Landsat');

/************************************************************************************** 
The Landsat-derived values correspond to those of the MODIS Terra daytime 
overpass. Overall, there is a similar patterns in both layers, but Landsat 
picks up a lot more heterogeneity than MODIS due to its finer resolution

**************************************************************************************/

// Part 1.3. Using Earth Engine Landsat LST Toolbox:

// Link to the module that computes the Landsat LST.
var landsatLST = require('users/EAGLE/Project_Modules:Landsat_LST.js');

// Select region of interest, date range, and Landsat satellite.
var geometry = AOI.geometry();
var satellite = 'L8';
var dateStart = '2014-01-01';
var dateEnd = '2019-01-01';
var useNdvi = true;

// Get Landsat collection with additional necessary variables.
var landsatColl = landsatLST.collection(satellite, dateStart, dateEnd,
    geometry, useNdvi);

// Create composite, clip, filter to summer, mask, and convert to degree Celsius.
var landsatComp = landsatColl
    .select('LST')
    .filter(sumFilter)
    .median()
    .clip(AOI)
    .updateMask(notWater)
    .subtract(273.15);

Map.addLayer(landsatComp, {
        min: 25,
        max: 38,
        palette: ['blue', 'white', 'red']
    },
    'LST_SMW');

/************************************************************************************** 
Now that we have estimates of LST using various products and algorithms, we can 
calculate the rural LST and subtract from the urban LST to get the SUHI intensity. 
In the next part, we create a buffered area around the urban boundary to get the rural 
reference to calculate the SUHI. 

**************************************************************************************/

// Part 2: Defining Urban and Rural References \\

// Function to subtract the original urban cluster 
// from the buffered cluster to generate rural references.
function bufferSubtract(feature) {
    return ee.Feature(feature.geometry()
        .buffer(2000)
        .difference(feature.geometry()));
}

var ruralRef = AOI.map(bufferSubtract);

Map.addLayer(ruralRef, {
    color: 'green'
}, 'Buffer_ref');

// Define sequence of buffer widths to be tested.
var buffWidths = ee.List.sequence(30, 3000, 30);

// Function to generate standardized buffers 
// (approximately comparable to area of urban cluster).
function bufferOptimize(feature) {
    function buff(buffLength) {
        var buffedPolygon = ee.Feature(feature.geometry()
                .buffer(ee.Number(buffLength)))
            .set({
                'Buffer_width': ee.Number(buffLength)
            });
        var area = buffedPolygon.geometry().difference(feature
            .geometry()).area();
        var diffFeature = ee.Feature(
            buffedPolygon.geometry().difference(feature
                .geometry()));
        return diffFeature.set({
            'Buffer_diff': area.subtract(feature.geometry()
                .area()).abs(),
            'Buffer_area': area,
            'Buffer_width': buffedPolygon.get('Buffer_width')
        });
    }

    var buffed = ee.FeatureCollection(buffWidths.map(buff));
    var sortedByBuffer = buffed.sort({
        property: 'Buffer_diff'
    });
    var firstFeature = ee.Feature(sortedByBuffer.first());
    return firstFeature.set({
        'Urban_Area': feature.get('Area'),
        'Buffer_width': firstFeature.get('Buffer_width')
    });
}

// Map function over urban feature collection.
var ruralRefStd = AOI.map(bufferOptimize);

Map.addLayer(ruralRefStd, {
    color: 'brown'
}, 'Buffer_ref_std');

print('ruralRefStd', ruralRefStd);

// Select the NLCD land cover data.
var landCover = ee.Image('USGS/NLCD/NLCD2016').select('landcover');
var urban = landCover;

// Select urban pixels in image.
var urbanUrban = urban.updateMask(urban.eq(23).or(urban.eq(24)));

// Select background reference pixels in the image.
var nonUrbanVals = [41, 42, 43, 51, 52, 71, 72, 73, 74, 81, 82];
var nonUrbanPixels = urban.eq(ee.Image(nonUrbanVals)).reduce('max');
var urbanNonUrban = urban.updateMask(nonUrbanPixels);

Map.addLayer(urbanUrban.clip(AOI), {
    palette: 'red'
}, 'Urban pixels');
Map.addLayer(urbanNonUrban.clip(AOI), {
    palette: 'blue'
}, 'Non-urban pixels');

/************************************************************************************** 
As SUHI represents the temperature variance between urban and rural areas, we will
compute summary temperature metrics for the urban perimeter and various rural 
references utilizing Landsat and MODIS LST data.

**************************************************************************************/

// Part 3: Calculating the Surface Urban Heat Island Intensity \\

// Define function to calculate mean LST for different cases
function polygonMean(feature) {
    // Extract geometry from the feature
    var geometry = feature.geometry();
    
    // Calculate mean LST values for urban areas
    var reducedLstUrb = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 30
        });
    
    // Calculate mean LST values for urban areas within urban boundaries
    var reducedLstUrbMask = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .updateMask(urbanUrban)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 30
        });
    
    // Calculate mean LST values for urban areas within urban boundaries (lower resolution)
    var reducedLstUrbPix = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .updateMask(urbanUrban)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 500
        });
    
    // Calculate mean LST values for rural areas within urban boundaries (lower resolution)
    var reducedLstRurPix = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .updateMask(urbanNonUrban)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 500
        });

    // Return feature with summarized LST values as properties
    return feature.set({
        'MODIS_LST_urb': reducedLstUrb.get('LST_Day_1km'),
        'MODIS_LST_urb_mask': reducedLstUrbMask.get('LST_Day_1km'),
        'MODIS_LST_urb_pix': reducedLstUrbPix.get('LST_Day_1km'),
        'MODIS_LST_rur_pix': reducedLstRurPix.get('LST_Day_1km')
    });
}

// Map the function over the urban boundary to get mean urban and rural LST
var reduced = AOI.map(polygonMean);

// Define a function to calculate mean LST for rural areas
function refMean(feature) {
    // Extract geometry from the feature
    var geometry = feature.geometry();
    
    // Calculate mean LST values for rural areas
    var reducedLstRur = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 30
        });
    
    // Calculate mean LST values for rural areas within urban boundaries
    var reducedLstRurMask = lstFinal.subtract(273.15)
        .updateMask(notWater)
        .updateMask(urbanNonUrban)
        .reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: geometry,
            scale: 30
        });
    
    // Return feature with summarized LST values as properties
    return feature.set({
        'MODIS_LST_rur': reducedLstRur.get('LST_Day_1km'),
        'MODIS_LST_rur_mask': reducedLstRurMask.get('LST_Day_1km')
    });
}

// Map the function over the constant buffer rural reference boundary
var reducedRural = ee.FeatureCollection(ruralRef).map(refMean);

// Map the function over the standardized rural reference boundary
var reducedRuralStd = ruralRefStd.map(refMean);

print('reduced', reduced);
print('reducedRural', reducedRural);
print('reducedRuralStd', reducedRuralStd);

// Display SUHI variability within the city
var suhi = landsatComp
    .updateMask(urbanUrban)
    .subtract(ee.Number(ee.Algorithms.If(ee.Feature(reduced.first())
    .get('Landsat_LST_rur_pix'), 
     ee.Feature(reduced.first()).get('Landsat_LST_rur_pix'), 0)));

print ('SUHI', suhi);

Map.addLayer(suhi, {
    palette: ['blue', 'white', 'red'],
    min: 2,
    max: 8
}, 'SUHI');


//****************************************************************************************//
/*
## Refereces: 

- Ermida, S.L. et al. (2020) ‘Google Earth engine open-source code for land surface 
  temperature estimation from the landsat series’, Remote Sensing, 12(9), p. 1471. 
  doi:10.3390/rs12091471. 

- Cardille, J.A. et al. (2024) Cloud-based remote sensing with Google Earth Engine: 
  Fundamentals and Applications. Cham, Switzerland: Springer. Available at: 
  https://doi.org/10.1007/978-3-031-26588-4_36. 
  
//******************************************************************************************/
